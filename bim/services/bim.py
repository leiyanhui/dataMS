# -*- coding: utf-8 -*-# @Time    : 2021/11/26 1:12 上午# @Author  : leiyh# @Email   : leiyh0104@163.com# @File    : bim.py# @Software : PyCharmimport loggingfrom sqlalchemy import select,delete,updatefrom utils.models import Userfrom utils.util import Authority@Authority(perms=["root"])async def get_info(request):    """    :param request: resuest is request object    :return: return a dict    """    session = request.ctx.session    async with session.begin():        try:            result = await session.execute(select(User).where(User.name == request.args.get("name")))            user = result.scalar()        except Exception as e:            logging.info(e)            message = {'message': "500"}        else:            message = {'code': 200,'message':"查询成功","data":user.to_dict()if user else {}}    return messageasync def post_info(request):    """    :param request: request is a object    :return: return a dict    """    session = request.ctx.session    get_data = await get_info(request)    if get_data.get('data',None).get("name") is None:        async with session.begin():            user = User(**request.args)            session.add(user)        return user.to_dict()    else:        return {"message":"the name has been exist!"}async def delete_info(request):    """    :return:    """    session = request.ctx.session    async with session.begin():        try:            result = await session.execute(delete(User).where(User.name == request.args.get("name")))        except Exception as e:            logging.info(e)            message = {'message': "删除成功"}        else:            message = {'code': 200, 'message': "删除成功"}    return messageasync def put_info(request):    """    :param request:    :return:    """    session = request.ctx.session    async with session.begin():        try:            await session.execute(update(User).where(User.name == request.args.get("name")).values(age=request.args.get("age")))        except Exception as e:            session.rollback()            message = {"message": "data update failed"}        else:            message = {"message":"data update sucess"}    return message