# -*- coding: utf-8 -*-# @Time    : 2021/11/26 12:58 上午# @Author  : leiyh# @Email   : leiyh0104@163.com# @File    : util.py# @Software : PyCharmimport loggingimport tracebackimport typesfrom importlib import import_moduleasync def location_url(method, stringUrl,args):    """    :param stringUrl:    :return:    """    packName,modelName,fileName, funcName = stringUrl.split("-")    funcName = f"{method}_{funcName}"    obj = import_module(f"{packName}.{modelName}s.{fileName}",funcName)    func = getattr(obj,funcName)    return await func(args)# 类装饰器，进行权限访问class Authority(object):    """    the class is used to check permission of user to call  the api function    """    def __init__(self,func=None,perms=None):        """        :param func:        :param perms:        """        self.perms = perms        self.func = func        if isinstance(func, types.FunctionType):            self.wrapper = self.func_wapper        else:            if not perms:                perms = ["base"]            self.require_perms = set(perms)    async def __check_perms(self):        """        :return:        """        # current_admin 获取当前用户的权限        user_perms = ["base"]        if set(user_perms).issubset(self.require_perms):            return True        else:            return False    async def perm_wapper(self, *args, **kwargs):        """        :param args:        :param kwargs:        :return:        """        # if current_user.__tabelName__ != "admin":        #     raise (403)        # if not self.__check_perms(*args):        #     raise(403)        try:            ret = await self.func(*args, **kwargs)        except Exception as e:            logging.error(traceback.format_exc())        else:            return ret    async def func_wapper(self, *request, **kwargs):        """        :param args:        :param kwargs:        :return:        """        info = request[0].args.get("name")        result = await self.__check_perms()        if result:            try:                ret = await self.func(*request, **kwargs)            except Exception as e:                logging.error(traceback.format_exc())            else:                return ret        else:            return {"message":"No Authority"}    async def __wrapper(self,*args,**kwargs):        """        :param args:        :param kwargs:        :return:        """        if self.func != None:            return await self.func(*args, **kwargs)    def __call__(self,*args,**kwargs):        """        :param args:        :param kwargs:        :return:        """        if isinstance(args[0], types.FunctionType):            self.func = args[0]            return self.func_wapper        if self.func != None:            return self.__wrapper### async def func1():#     await asyncio.sleep(0)#     print("func1")## @Authority(perms=["base"])# async def main(request,*args):#     #Authority(func=func1)()#     print("this is main")###### if __name__ == '__main__':#     asyncio.run(main([1,2]))